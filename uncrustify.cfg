# configuration file the code beautifier uncrustify
# cf. $(install_dir)/share/uncrustify/kr-indent.cfg
#     $(install_dir)/share/uncrustify/defaults.cfg
# for example if `which uncrustify` yields /usr/bin/uncrustify
# then the install_dir = /usr

input_tab_size = 8

# The number of columns to indent per level.
# Usually 2, 3, 4, or 8.
indent_columns  = 2        # number

# How to use tabs when indenting code
# 0=spaces only
# 1=indent with tabs to brace level, align with spaces
# 2=indent and align with tabs, using spaces when not on a tabstop
indent_with_tabs = 0        # number

# False=treat 'else\nif' as 'else if' for indenting purposes
# True=indent the 'if' one level
indent_else_if                           = false    # false/true

# Add or remove space around arithmetic operator '+', '-', '/', '*', etc
sp_arith = force   # ignore/add/remove/force

# Add or remove space around assignment operator '=', '+=', etc
sp_assign = force # ignore/add/remove/force

# Add or remove space around boolean operators '&&' and '||'
sp_bool = force   # ignore/add/remove/force

# Add or remove space around compare operator '<', '>', '==', etc
sp_compare = force   # ignore/add/remove/force

# Add or remove space after ','
sp_after_comma                           = add # ignore/add/remove/force

sp_before_semi			= remove
sp_paren_paren			= remove	# space between (( and ))
sp_return_paren			= remove	# "return (1);" vs "return(1);"
sp_sizeof_paren			= remove	# "sizeof (int)" vs "sizeof(int)"
sp_before_sparen		= force		# "if (" vs "if("
sp_after_sparen			= force		# "if () {" vs "if (){"
#sp_after_cast			= force  # "(int) a" vs "(int)a"
sp_brace_else                   = force         # "} else" instead of "}else"
sp_else_brace                   = force         # "else {" instead of "else{"
sp_inside_braces		= force		# "{ 1 }" vs "{1}"
sp_inside_braces_struct		= force		# "{ 1 }" vs "{1}"
sp_inside_braces_enum		= force		# "{ 1 }" vs "{1}"
sp_inside_paren			= remove	# "( 1 )" vs "(1)"
sp_inside_fparen		= remove        # "( 1 )" vs "(1)" - functions
sp_inside_sparen		= remove        # "( 1 )" vs "(1)" - if/for/etc

# Add or remove space between ')' and '{'
sp_paren_brace = force   # ignore/add/remove/force

# Add or remove space before pointer star '*'
#sp_before_ptr_star = add   # ignore/add/remove/force

# Add or remove space before a reference sign '&'
#sp_before_byref = add   # ignore/add/remove/force

# Add or remove space inside a non-empty '[' and ']'
sp_inside_square  = remove   # ignore/add/remove/force

sp_func_def_paren		= remove	# "int foo () {" vs "int foo(){"
sp_func_call_paren		= remove	# "foo (" vs "foo("
sp_func_proto_paren		= remove	# "int foo ();" vs "int foo();"




# The number of newlines after '}' of a multi-line function body
nl_after_func_body = 4        # number
nl_enum_brace			= remove	# "enum {" vs "enum \n {"
nl_union_brace			= remove	# "union {" vs "union \n {"
nl_struct_brace			= remove	# "struct {" vs "struct \n {"
nl_do_brace			= remove	# "do {" vs "do \n {"
nl_if_brace			= remove	# "if () {" vs "if () \n {"
nl_for_brace			= remove	# "for () {" vs "for () \n {"
nl_else_brace			= remove	# "else {" vs "else \n {"
nl_while_brace			= remove	# "while () {" vs "while () \n {"
nl_switch_brace			= remove	# "switch () {" vs "switch () \n {"
nl_fcall_brace			= add		# "foo() {" vs "foo()\n{"
nl_fdef_brace			= add		# "int foo() {" vs "int foo()\n{"
nl_brace_while			= remove
nl_brace_else			= remove    # "} else" instead of "}\nelse"
nl_else_if                      = remove    # "else if" instead of "else\nif"
nl_squeeze_ifdef		= TRUE

# Whether to put a newline after brace open.
# This also adds a newline before the matching brace close.
# this should be used only for badly written code
#nl_after_brace_open             = true # false/true

eat_blanks_before_close_brace	= TRUE
eat_blanks_after_open_brace	= TRUE

